buildscript {
	ext {
		kotlinVersion = '1.2.10'
		springBootVersion = '1.5.9.RELEASE'
	}
	repositories {
		mavenCentral()
		maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
		classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
	}
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'idea'
idea {
	module {
		outputDir file('build/classes/main')
		testOutputDir file('build/classes/test')
	}
}
if(project.convention.findPlugin(JavaPluginConvention)) {
	// Change the output directory for the main and test source sets back to the old path
	sourceSets.main.output.classesDir = new File(buildDir, "classes/main")
	sourceSets.test.output.classesDir = new File(buildDir, "classes/test")
}

processResources.destinationDir = compileJava.destinationDir
compileJava.dependsOn processResources

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8
compileKotlin {
	kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
	kotlinOptions.jvmTarget = "1.8"
}

repositories {
	mavenCentral()
}


dependencies {
	compile("org.springframework.boot:spring-boot-starter-thymeleaf")
	compile("org.springframework.boot:spring-boot-devtools")
	compile('org.springframework.boot:spring-boot-starter-web')
	compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}")
	compile("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")
	compile group: 'mysql', name: 'mysql-connector-java', version: '6.0.6'
	compile('org.seasar.doma.boot:doma-spring-boot-starter:1.0.2')
	testCompile('org.springframework.boot:spring-boot-starter-test')
}
